#!/usr/bin/env bash

# Exit immediately on any error
set -o errexit
# Don't allow using variables that aren't set
set -o nounset

readonly SCRIPT_SRC="$(dirname "${BASH_SOURCE[0]}")"
readonly SCRIPT_DIR="$(cd "${SCRIPT_SRC}" >/dev/null 2>&1 && pwd)"
readonly SCRIPT_NAME=$(basename "$0")

# Entry point to our build script.
#
# $@ - All command-line arguments.
main() {
  parse_commandline "$@"

  $show_usage && terminate 3
  validate_requirements && terminate 4

  cd "${SCRIPT_DIR}" && execute_tasks && terminate 5

  terminate 0
}

# Perform tasks to execute (empty by default).
#
# @return 0 - Failed to complete all tasks.
execute_tasks() {
  $log "Execute tasks"

  local -r await=close_write,delete

  $log "Await file modifications"
  inotifywait -q -e "${await}" -m . | \
  while read -r directory event filename; do

    # Act on Markdown file events; ignore directory delete events.
    if [[ "${filename,,}" == *\.*md && ! "${event}" == *ISDIR* ]]; then
      $log "${directory}${filename} (${event})"

      execute_build
    fi
  done

  return 1
}

execute_build() {
  local -r DIR_BUILD="build"
  mkdir -p "${DIR_BUILD}"

  local -r FILE_MAIN_PREFIX="main"
  local -r FILE_BODY_PREFIX="${DIR_BUILD}/body"

  local -r FILE_CAT="${FILE_BODY_PREFIX}.md"
  local -r FILE_TEX="${FILE_BODY_PREFIX}.tex"
  local -r FILE_PDF="${FILE_BODY_PREFIX}.pdf"
  local -r FILE_DST="$(basename "${ARG_FILE_OUTPUT}" .pdf).pdf"

  $log "Concatenate files into ${FILE_CAT}"
  cat ./??.md > ${FILE_CAT}

  $log "Generate ${FILE_TEX}"
  pandoc --to context ${FILE_CAT} > "${FILE_TEX}"

  $log "Generate ${FILE_PDF}"
  context --nonstopmode --batchmode --purgeall --path=build,styles "${FILE_MAIN_PREFIX}" >/dev/null 2>&1

  $log "Rename ${FILE_MAIN_PREFIX}.pdf to ${FILE_DST}"
  mv "${FILE_MAIN_PREFIX}.pdf" "${FILE_DST}"
}

# Check for required commands.
#
# @return 0 - At least one command is missing.
# @return 1 - All commands are available.
validate_requirements() {
  $log "Check missing software requirements"

  required context "https://wiki.contextgarden.net"
  required pandoc "https://www.pandoc.org"
  required gs "https://www.ghostscript.com"

  return "${REQUIRED_MISSING}"
}

# Check for a required command.
#
# $1 - Command to execute.
# $2 - Where to find the command's source code or binaries.
required() {
  if ! command -v "$1" > /dev/null 2>&1; then
    warning "Missing requirement: install $1 ($2)"
    REQUIRED_MISSING=0
  fi
}

# Show acceptable command-line arguments.
#
# @return 0 - Indicate script may not continue.
util_show_usage() {
  printf "Usage: %s [OPTION...]\n" "${SCRIPT_NAME}" >&2
  printf "  -d, --debug\t\tLog messages while processing\n" >&2
  printf "  -h, --help\t\tShow this help message then exit\n" >&2

  return 0
}

# Write coloured text to standard output.
#
# $1 - The text to write
# $2 - The colour to write in
colored_text() {
  printf "%b%s%b\n" "$2" "$1" "${COLOR_OFF}"
}

# Write a warning message to standard output.
#
# $1 - The text to write
warning() {
  colored_text "$1" "${COLOR_WARNING}"
}

# Write an error message to standard output.
#
# $1 - The text to write
error() {
  colored_text "$1" "${COLOR_ERROR}"
}

# Write a timestamp and message to standard output.
#
# $1 - The text to write
util_log() {
  printf "[%s] " "$(date +%H:%I:%S.%4N)"
  colored_text "$1" "${COLOR_LOGGING}"
}

# Perform no operations.
#
# return 1 - Indicate function succeeded.
noop() {
  return 1
}

# Exit the program with a given exit code.
#
# $1 - The exit code to use.
terminate() {
  exit "$1"
}

# Set global argument values.
parse_commandline() {
  while [ "$#" -gt "0" ]; do
    local consume=1

    case "$1" in
      -d|--debug)
        log=util_log
      ;;
      -h|-\?|--help)
        show_usage=util_show_usage
      ;;
      -f|--filename)
        ARG_FILE_OUTPUT="$2"
        consume=2
      ;;
      *)
        # Skip argument
      ;;
    esac

    shift ${consume}
  done
}

# ANSI colour escape sequences.
readonly COLOR_BLUE='\033[1;34m'
readonly COLOR_PINK='\033[1;35m'
readonly COLOR_DKGRAY='\033[30m'
readonly COLOR_DKRED='\033[31m'
readonly COLOR_YELLOW='\033[1;33m'
readonly COLOR_OFF='\033[0m'

# Colour definitions used by script.
readonly COLOR_LOGGING=${COLOR_BLUE}
readonly COLOR_WARNING=${COLOR_YELLOW}
readonly COLOR_ERROR=${COLOR_DKRED}

# Set to 0 if any commands are missing.
REQUIRED_MISSING=1

# These functions may be set to util delegates while parsing arguments.
show_usage=noop
log=noop

# Run the script, passing in all command-line arguments.
#
# Terminates with exit level 0 by default.
main "$@"
